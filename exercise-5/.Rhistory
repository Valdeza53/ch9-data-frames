# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(vec, a, b) {
if(a > b) {
result <- words[(tolower(words) < a & tolower(words) > b)]
} else {
result <- words[(tolower(words) < b & tolower(words) > a)]
}
return(result)
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "e", "q")
styler:::style_active_file()
setwd("D:/Systemdata/Desktop/Info201/ch7-vectors/exercise-3")
lintr::lint('exercise.R')
setwd("D:/Systemdata/Desktop/Info201/ch8-lists/exercise-1")
lintr::lint('exercise.R')
styler:::style_active_file()
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
my_list <- as.list(runif(10))
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
my_list <- as.list(runif(10, 0, 10))
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(my_list, round, 0.1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("Lists are extremely useful for organizing data. They allow you to group together data like a person’s name (characters), job title (characters), salary (number), and whether they are in a union (logical)—and you don’t have to remember whether whether the person’s name or title was the first element!")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
split_sentence<- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
letters <- split_sentence[1]
# Extract the vector of letters from the resulting list
letters <- split_sentence[[1]]
c1 <- c(1,2)
l1 <- list(a,b,3)
l1 <- list('a','b',3)
li[1]
l1[1]
l1[[1]
]
l1[[1]]
l1[1]
l1[4] <- c1
l1[[4]] <- c1
li[4]
l1[4]
l1[[4]
]
l1[4][1]
l1[[4]][1]
# Use the `unique()` function to get a vector of unique letters
unique_letters <- unique(letters)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurrences <- function(l, v) {
return(length(v[v == l]))
}
count_occurrences("i", letters)
letters[letters == "i"]
letters == "i"
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence, count_occurrences, unique_letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(sentence, count_occurrences, unique_letters))
?sapply
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(sentence, count_occurrences, l = unique_letters))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(sentence, count_occurrences, var1 = unique_letters))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(sentence, count_occurrences, l = unique_letters))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(unique_letters, count_occurrences, sentence))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(unique_letters, count_occurrences, v = sentence))
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply(unique_letters, count_occurrences, v = sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply(i, count_occurrences, v = sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply('i', count_occurrences, v = sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply(unique_letters, count_occurrences, v = sentence)
result <- sapply(unique_letters, count_occurrences, v = sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply(c("i"), count_occurrences, v = sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply(c("i"), count_occurrences, v = letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- sapply(unique_letters, count_occurrences, v = letters)
# Print the resulting list of frequencies
print(result)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
result <- as.list(sapply(unique_letters, count_occurrences, v = letters))
# Print the resulting list of frequencies
print(result)
setwd("D:/Systemdata/Desktop/Info201/ch8-lists/exercise-2")
styler:::style_active_file()
lintr::lint('exercise.R')
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("Lists are extremely useful for organizing data. They allow you
to group together data like a person’s name (characters), job title
(characters), salary (number), and whether they are in a union
(logical)—and you don’t have to remember whether whether the
person’s name or title was the first element!")
styler:::style_active_file()
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-1")
styler:::style_active_file()
styler:::style_active_file()
lintr::lint('exercise.R')
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", c(1:100)))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries2017 <- c(runif(100,40000,50000))
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries2018 <- salaries2017 + c(runif(100,-5000,10000))
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries2017, salaries2018, stringAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries2018 - salaries2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
View(salaries)
# What was the 2018 salary of employee 57
salaries["Employee 57", "salaries2018"]
# What was the 2018 salary of employee 57
salaries["Employee 57", "salaries2018"]
# What was the 2018 salary of employee 57
salaries['Employee 57', 'salaries2018']
# What was the 2018 salary of employee 57
salaries[57, 'salaries2018']
# What was the 2018 salary of employee 57
salaries['Employee 57', 'salaries2018']
# What was the 2018 salary of employee 57
salaries["Employee 57", 'salaries2018']
# How many employees got a raise?
salaries[["got_raise"]]
# How many employees got a raise?
salaries[["got_raise"]][salaries[["got_raise"]]]
# How many employees got a raise?
salaries[["got_raise"]][[salaries[["got_raise"]]]]
# How many employees got a raise?
salaries["got_raise"][[salaries[["got_raise"]]]]
# How many employees got a raise?
salaries[["got_raise"]]
# What was the 2018 salary of employee 57
salaries[57, 'salaries2018']
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative] number means that a salary may have decreased!)
salaries2018 <- salaries2017 + c(runif(100,-5000,10000))
# How many employees got a raise?
salaries[["got_raise"]][salaries[["got_raise"]]]
# How many employees got a raise?
length(salaries[["got_raise"]][salaries[["got_raise"]]])
columnt <- salaries[["got_raise"]]
salaries$got_raise
# How many employees got a raise?
length(salaries$got_raise[salaries$got_raise])
# What was the dollar value of the highest raise?
salaries$salaries2018[max(salaries$change)]
# What was the dollar value of the highest raise?
max(salaries$change)
View(salaries)
# What was the "name" of the employee who received the highest raise?
salaries[change == max(salaries$change)]
# What was the "name" of the employee who received the highest raise?
salaries['change' == max(salaries$change)]
# What was the "name" of the employee who received the highest raise?
text <- salaries['change' == max(salaries$change)]
View(text)
# What was the "name" of the employee who received the highest raise?
text <- salaries[salaries$change == max(salaries$change)]
# What was the "name" of the employee who received the highest raise?
text <- salaries[[salaries$change == max(salaries$change)]]
# What was the "name" of the employee who received the highest raise?
text <- salaries$change == max(salaries$change)
print(text)
# What was the "name" of the employee who received the highest raise?
text <- salaries$change[salaries$change == max(salaries$change)]
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$change == max(salaries$change)]
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
salaries$employees[salaries$change == min(salaries$change)]
# What was the average salary change?
mean(salaries$change)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", c(1:100)))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries2017 <- c(runif(100,40000,50000))
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative] number means that a salary may have decreased!)
salaries2018 <- salaries2017 + c(runif(100,-5000,10000))
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries2017, salaries2018, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries2018 - salaries2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# What was the 2018 salary of employee 57
salaries[57, 'salaries2018']
# How many employees got a raise?
length(salaries$got_raise[salaries$got_raise])
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$change == max(salaries$change)]
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
salaries$employees[salaries$change == min(salaries$change)]
# What was the average salary change?
mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[salaries$got_raise])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[!salaries$got_raise])
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(salaries, file = "salariesa.csv")
styler:::style_active_file()
lintr::lint('exercise.R')
lintr::lint('exercise.R')
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-3")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data('USPersonalExpenditure')
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data('USPersonalExpenditure')
View("USPersonalExpenditure")
USPersonalExpenditure
USPersonalExpenditure
View("USPersonalExpenditure")
View(USPersonalExpenditure)
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
my_data <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(my_data)
# What are the row names of your dataframe?
rownames(my_data)
# Add a column "category" to your data frame that contains the rownames
my_data$category <- rownames(my_data)
View(my_data)
# How much money was spent on personal care in 1940?
my_data['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
my_data['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
my_data$category[my_data$X1960 == max(my_data$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
my_data$category[my_data$year == max(my_data$year)]
}
lowest_category(X1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
my_data$category[my_data[[paste0('X', year)]] == max(my_data[[paste0('X', year)]])]
}
lowest_category(X1960)
lowest_category(1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
my_data$category[my_data[[paste0('X', year)]] == min(my_data[[paste0('X', year)]])]
}
lowest_category(1960)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(rownames(my_data), lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
my_data$category[my_data[[year]] == min(my_data[[year]])]
}
lowest_category(X1960)
lowest_category("X1960")
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(rownames(my_data), lowest_category)
is.vector(rownames(my_data))
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
reesult <- my_data$category[my_data[[year]] == min(my_data[[year]])]
result
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(rownames(my_data), lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
result <- my_data$category[my_data[[year]] == min(my_data[[year]])]
result
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(rownames(my_data), lowest_category)
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-3")
styler:::style_active_file()
styler:::style_active_file()
lintr::lint(exercise.R)
lintr::lint('exercise.R')
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organizations <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organizations)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
is.vector(grants$organization)
# Which organization received the largest grant?
grants$organization[[grants$total_amount == max(grants$total_amount)]]
# Which organization received the largest grant?
grants$organization[grants$total_amount == max(grants$total_amount)]
# Which organization received the smallest grant?
grants$organization[grants$total_amount == min(grants$total_amount)]
# How many grants were awarded in 2010?
sum(grants$total_amount[grants$start_year == 2010])
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-4")
styler:::style_active_file()
lintr::lint(exercise.R)
lintr::lint('exercise.R')
lintr::lint('exercise.R')
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("..data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv(".data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
View(names)
test <- rownames(names$year == 2013)
test <- names$year == 2013
test <- names$year == 2013
rownames(names)
colnames(names)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data.frame(colnames(names))
View(names_2013)
names_2013 <- data.frame(names[["X.1"]][selector], names$X[selector], names$name[selector], names$year[selector])
# Create a data frame `names_2013` that contains only the rows for the year 2013
selector <- names$year == 2013
names_2013 <- data.frame(names[["X.1"]][selector], names$X[selector], names$name[selector], names$year[selector])
View(names_2013)
colnames(names_2013) <- c("X.1", "X", "name", "year")
View(names_2013)
names_2013 <- data.frame(names[["X.1"]][selector], names$X[selector], names$name[selector], names$prop[selector], names$year[selector])
colnames(names_2013) <- c("X.1", "X", "name", "prop", "year")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# What was the most popular female name in 2013?
name_2013$name[name_2013$prop == max(name_2013$prop)]
# What was the most popular female name in 2013?
names_2013$name[names_2013$prop == max(names_2013$prop)]
names_2013 <- data.frame(names[["X.1"]][selector], names$X[selector], names$name[selector], names$prop[selector], names$year[selector], stringsAsFactors = FALSE)
colnames(names_2013) <- c("X.1", "X", "name", "prop", "year")
# What was the most popular female name in 2013?
names_2013$name[names_2013$prop == max(names_2013$prop)]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
these_names <- data.frame(names$name[names$year == year], names$prop[names$year == year])
colnames(these_names) <- c("name", "prop")
these_names$name[these_names$prop == max(these_names$prop)]
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
these_names <- data.frame(names$name[names$year == year], names$prop[names$year == year], stringsAsFactors = FALSE)
colnames(these_names) <- c("name", "prop")
these_names$name[these_names$prop == max(these_names$prop)]
}
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(tname, year) {
selector <- names$year == year
tnames <- data.frame(names[["X.1"]][selector], names$X[selector], names$name[selector], names$prop[selector], names$year[selector], stringsAsFactors = FALSE)
colnames(tnames) <- c("X.1", "X", "name", "prop", "year")
number <- length(tnames[tnames$name == tname])
percentage <- number/length(tnames$name)
round(percentage * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(tname, year) {
selector <- names$year == year
tnames <- data.frame(names[["X.1"]][selector], names$X[selector], names$name[selector], names$prop[selector], names$year[selector], stringsAsFactors = FALSE)
colnames(tnames) <- c("X.1", "X", "name", "prop", "year")
number <- length(tnames$name[tnames$name == tname])
percentage <- number/length(tnames$name)
round(percentage * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Robin", 1999)
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-5")
lintr::lint('exercise.R')
styler:::style_active_file()
styler:::style_active_file()
lintr::lint('exercise.R')
lintr::lint('exercise.R')
