1+1
3+4
?
9
clear
x<-5
5x
5*x
1+1
hour_in_a_week + 1
hours_in_a_week + 1
hours_in_a_week+1
hours_in_a_week + 1
hours_in_a_week <- 24
hours_in_a_week <- (24 * 7)
data <- data.frame
data <- data.frame()
data$name <- "a"
names(data)[1] <- "station"
names(data)[[1] <- "station"
names(data)[[1]] <- "station"
rownames(data)[1] <- "station"
rownames(data) <- c("station","delay")
data <- data.frame(c("a","b"))
View(data)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", c(1:100)))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries2017 <- c(runif(100,40000,50000))
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries2018 <- salaries2017 + c(runif(100,-5000,10000))
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries2017, salaries2018, stringAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries2018 - salaries2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
View(salaries)
station <- c("a")
delay <- c(5)
data <- data.frame(station, delay)
View(data)
station[length(station)] = "b"
# What was the 2018 salary of employee 57
View(data)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
setwd("D:/Systemdata/Desktop/Info201/ch9-data-frames/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
names_2013 <- names[names$year == 2013]
names_2013 <- names[names$year == 2013,]
View(names_2013)
# What was the most popular female name in 2013?
names_2013$name[names_2013$prop == max(names_2013$prop)]
# What was the most popular female name in 2013?
names_2013$name[names_2013$prop == max(names_2013$prop), 'name')
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
these_names <- data.frame(names$name[names$year == year],
names$prop[names$year == year],
stringsAsFactors = FALSE
)
colnames(these_names) <- c("name", "prop")
these_names$name[these_names$prop == max(these_names$prop)]
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(tname, year) {
selector <- names$year == year
tnames <- data.frame(names[["X.1"]][selector], names$X[selector],
names$name[selector], names$prop[selector],
names$year[selector],
stringsAsFactors = FALSE
)
colnames(tnames) <- c("X.1", "X", "name", "prop", "year")
number <- length(tnames$name[tnames$name == tname])
percentage <- number / length(tnames$name)
round(percentage * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Robin", 1999)
# What was the most popular female name in 2013?
names_2013$name[names_2013$prop == max(names_2013$prop), 'name']
most_popular_name_2013 <- names_2013[names_2013$prop == max(names_2013$prop), 'name']
